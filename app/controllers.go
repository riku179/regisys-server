// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/riku179/regisys/design
// --out=$(GOPATH)/src/github.com/riku179/regisys
// --version=v1.1.0-dirty
//
// API "regisys": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ItemsController is the controller interface for the Items actions.
type ItemsController interface {
	goa.Muxer
	Add(*AddItemsContext) error
	Delete(*DeleteItemsContext) error
	Modify(*ModifyItemsContext) error
	Show(*ShowItemsContext) error
}

// MountItemsController "mounts" a Items resource controller on the given service.
func MountItemsController(service *goa.Service, ctrl ItemsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddItemsContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddGoodsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("POST", "/item", ctrl.MuxHandler("Add", h, unmarshalAddItemsPayload))
	service.LogInfo("mount", "ctrl", "Items", "action", "Add", "route", "POST /item", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteItemsContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("DELETE", "/item/:id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Items", "action", "Delete", "route", "DELETE /item/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewModifyItemsContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ModifyGoodsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Modify(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("PUT", "/item/:id", ctrl.MuxHandler("Modify", h, unmarshalModifyItemsPayload))
	service.LogInfo("mount", "ctrl", "Items", "action", "Modify", "route", "PUT /item/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowItemsContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/item", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Items", "action", "Show", "route", "GET /item", "security", "jwt")
}

// unmarshalAddItemsPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddItemsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addGoodsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalModifyItemsPayload unmarshals the request body into the context request data Payload field.
func unmarshalModifyItemsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &modifyGoodsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// JWTController is the controller interface for the JWT actions.
type JWTController interface {
	goa.Muxer
	Signin(*SigninJWTContext) error
}

// MountJWTController "mounts" a JWT resource controller on the given service.
func MountJWTController(service *goa.Service, ctrl JWTController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSigninJWTContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Signin(rctx)
	}
	h = handleSecurity("SigninBasicAuth", h)
	service.Mux.Handle("GET", "/token", ctrl.MuxHandler("Signin", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Signin", "route", "GET /token", "security", "SigninBasicAuth")
}

// OrdersController is the controller interface for the Orders actions.
type OrdersController interface {
	goa.Muxer
	Add(*AddOrdersContext) error
	Delete(*DeleteOrdersContext) error
	Show(*ShowOrdersContext) error
}

// MountOrdersController "mounts" a Orders resource controller on the given service.
func MountOrdersController(service *goa.Service, ctrl OrdersController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddOrdersContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddOrderPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("POST", "/orders", ctrl.MuxHandler("Add", h, unmarshalAddOrdersPayload))
	service.LogInfo("mount", "ctrl", "Orders", "action", "Add", "route", "POST /orders", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteOrdersContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("DELETE", "/orders/:id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Orders", "action", "Delete", "route", "DELETE /orders/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowOrdersContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/orders", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Orders", "action", "Show", "route", "GET /orders", "security", "jwt")
}

// unmarshalAddOrdersPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddOrdersPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addOrderPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/*filepath", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/*filepath", "swagger/dist")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/dist", "route", "GET /*filepath")

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/", "swagger/dist/index.html")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/dist/index.html", "route", "GET /")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	Add(*AddUserContext) error
	Modify(*ModifyUserContext) error
	Show(*ShowUserContext) error
	ShowList(*ShowListUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddUserContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("POST", "/user", ctrl.MuxHandler("Add", h, unmarshalAddUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Add", "route", "POST /user", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewModifyUserContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ModifyUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Modify(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("PUT", "/user/:id", ctrl.MuxHandler("Modify", h, unmarshalModifyUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Modify", "route", "PUT /user/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUserContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/user/:id", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Show", "route", "GET /user/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowListUserContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.ShowList(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	service.Mux.Handle("GET", "/user/list", ctrl.MuxHandler("ShowList", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "ShowList", "route", "GET /user/list", "security", "jwt")
}

// unmarshalAddUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalModifyUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalModifyUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &modifyUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
