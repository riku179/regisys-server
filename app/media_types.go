// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=regisys/design
// --force=true
// --out=$(GOPATH)/src/regisys
// --version=v1.1.0-dirty
//
// API "regisys": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// An order (default view)
//
// Identifier: application/vnd.goa.example.orders+json; view=default
type GoaExampleOrders struct {
	// Is available order
	Available bool `form:"available" json:"available" xml:"available"`
	// Order date
	Date time.Time `form:"date" json:"date" xml:"date"`
	// Unique order ID
	ID int `form:"id" json:"id" xml:"id"`
	// Item name
	Item string `form:"item" json:"item" xml:"item"`
	// Unique item ID
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// Item price
	Price int `form:"price" json:"price" xml:"price"`
	// Item quantity
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// Register's name
	Register string `form:"register" json:"register" xml:"register"`
}

// Validate validates the GoaExampleOrders media type instance.
func (mt *GoaExampleOrders) Validate() (err error) {

	if mt.Item == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "item"))
	}

	if mt.Register == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "register"))
	}

	return
}

// GoaExampleOrdersCollection is the media type for an array of GoaExampleOrders (default view)
//
// Identifier: application/vnd.goa.example.orders+json; type=collection; view=default
type GoaExampleOrdersCollection []*GoaExampleOrders

// Validate validates the GoaExampleOrdersCollection media type instance.
func (mt GoaExampleOrdersCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// An Item (default view)
//
// Identifier: application/vnd.goa.example.regisys.goods+json; view=default
type GoaExampleRegisysGoods struct {
	// Unique item ID
	ID int `form:"id" json:"id" xml:"id"`
	// item name
	Item string `form:"item" json:"item" xml:"item"`
	// Membership discount
	MemberPrice int `form:"member_price" json:"member_price" xml:"member_price"`
	// item price
	Price int `form:"price" json:"price" xml:"price"`
	// item quantity
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// Unique User ID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
	// Username
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// Validate validates the GoaExampleRegisysGoods media type instance.
func (mt *GoaExampleRegisysGoods) Validate() (err error) {

	if mt.Item == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "item"))
	}

	if mt.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "user_name"))
	}

	return
}

// GoaExampleRegisysGoodsCollection is the media type for an array of GoaExampleRegisysGoods (default view)
//
// Identifier: application/vnd.goa.example.regisys.goods+json; type=collection; view=default
type GoaExampleRegisysGoodsCollection []*GoaExampleRegisysGoods

// Validate validates the GoaExampleRegisysGoodsCollection media type instance.
func (mt GoaExampleRegisysGoodsCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Username and ID (default view)
//
// Identifier: application/vnd.goa.example.token+json; view=default
type GoaExampleToken struct {
	// Unique user ID
	ID int `form:"id" json:"id" xml:"id"`
	// Username
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate validates the GoaExampleToken media type instance.
func (mt *GoaExampleToken) Validate() (err error) {
	if mt.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "username"))
	}

	return
}

// Users (default view)
//
// Identifier: application/vnd.goa.example.user+json; view=default
type GoaExampleUser struct {
	// Group of user
	Group string `form:"group" json:"group" xml:"group"`
	// Unique user ID
	ID int `form:"id" json:"id" xml:"id"`
	// Username
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the GoaExampleUser media type instance.
func (mt *GoaExampleUser) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Group == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "group"))
	}
	return
}

// GoaExampleUserCollection is the media type for an array of GoaExampleUser (default view)
//
// Identifier: application/vnd.goa.example.user+json; type=collection; view=default
type GoaExampleUserCollection []*GoaExampleUser

// Validate validates the GoaExampleUserCollection media type instance.
func (mt GoaExampleUserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
