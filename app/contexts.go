// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=regisys/design
// --force=true
// --out=$(GOPATH)/src/regisys
// --version=v1.1.0-dirty
//
// API "regisys": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"strconv"
	"time"
)

// AddGoodsContext provides the goods add action context.
type AddGoodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddItemPayload
}

// NewAddGoodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the goods controller add action.
func NewAddGoodsContext(ctx context.Context, service *goa.Service) (*AddGoodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AddGoodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddGoodsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// DeleteGoodsContext provides the goods delete action context.
type DeleteGoodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteGoodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the goods controller delete action.
func NewDeleteGoodsContext(ctx context.Context, service *goa.Service) (*DeleteGoodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteGoodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteGoodsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteGoodsContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteGoodsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ModifyGoodsContext provides the goods modify action context.
type ModifyGoodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *ModifyItemPayload
}

// NewModifyGoodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the goods controller modify action.
func NewModifyGoodsContext(ctx context.Context, service *goa.Service) (*ModifyGoodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ModifyGoodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ModifyGoodsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ModifyGoodsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowGoodsContext provides the goods show action context.
type ShowGoodsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	User *int
}

// NewShowGoodsContext parses the incoming request URL and body, performs validations and creates the
// context used by the goods controller show action.
func NewShowGoodsContext(ctx context.Context, service *goa.Service) (*ShowGoodsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowGoodsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		if user, err2 := strconv.Atoi(rawUser); err2 == nil {
			tmp4 := user
			tmp3 := &tmp4
			rctx.User = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user", rawUser, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowGoodsContext) OK(r GoaExampleRegisysGoodsCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.regisys.goods+json; type=collection")
	if r == nil {
		r = GoaExampleRegisysGoodsCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowGoodsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SigninJWTContext provides the jwt signin action context.
type SigninJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IsMember bool
}

// NewSigninJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signin action.
func NewSigninJWTContext(ctx context.Context, service *goa.Service) (*SigninJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := SigninJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIsMember := req.Params["is_member"]
	if len(paramIsMember) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("is_member"))
	} else {
		rawIsMember := paramIsMember[0]
		if isMember, err2 := strconv.ParseBool(rawIsMember); err2 == nil {
			rctx.IsMember = isMember
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_member", rawIsMember, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SigninJWTContext) OK(r *GoaExampleToken) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninJWTContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// AddOrdersContext provides the orders add action context.
type AddOrdersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddOrderPayload
}

// NewAddOrdersContext parses the incoming request URL and body, performs validations and creates the
// context used by the orders controller add action.
func NewAddOrdersContext(ctx context.Context, service *goa.Service) (*AddOrdersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AddOrdersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddOrdersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *AddOrdersContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// DeleteOrdersContext provides the orders delete action context.
type DeleteOrdersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteOrdersContext parses the incoming request URL and body, performs validations and creates the
// context used by the orders controller delete action.
func NewDeleteOrdersContext(ctx context.Context, service *goa.Service) (*DeleteOrdersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteOrdersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteOrdersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteOrdersContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteOrdersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowOrdersContext provides the orders show action context.
type ShowOrdersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Date *time.Time
	User *string
}

// NewShowOrdersContext parses the incoming request URL and body, performs validations and creates the
// context used by the orders controller show action.
func NewShowOrdersContext(ctx context.Context, service *goa.Service) (*ShowOrdersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowOrdersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDate := req.Params["date"]
	if len(paramDate) > 0 {
		rawDate := paramDate[0]
		if date, err2 := time.Parse(time.RFC3339, rawDate); err2 == nil {
			tmp7 := &date
			rctx.Date = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("date", rawDate, "datetime"))
		}
	}
	paramUser := req.Params["user"]
	if len(paramUser) > 0 {
		rawUser := paramUser[0]
		rctx.User = &rawUser
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowOrdersContext) OK(r GoaExampleOrdersCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.orders+json; type=collection")
	if r == nil {
		r = GoaExampleOrdersCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowOrdersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddUserContext provides the user add action context.
type AddUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewAddUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller add action.
func NewAddUserContext(ctx context.Context, service *goa.Service) (*AddUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := AddUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *AddUserContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// ModifyUserContext provides the user modify action context.
type ModifyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Group *string
	ID    string
}

// NewModifyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller modify action.
func NewModifyUserContext(ctx context.Context, service *goa.Service) (*ModifyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ModifyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGroup := req.Params["group"]
	if len(paramGroup) > 0 {
		rawGroup := paramGroup[0]
		rctx.Group = &rawGroup
		if rctx.Group != nil {
			if !(*rctx.Group == "admin" || *rctx.Group == "register" || *rctx.Group == "none") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`group`, *rctx.Group, []interface{}{"admin", "register", "none"}))
			}
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ModifyUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ModifyUserContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ModifyUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *GoaExampleUser) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowListUserContext provides the user showList action context.
type ShowListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller showList action.
func NewShowListUserContext(ctx context.Context, service *goa.Service) (*ShowListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowListUserContext) OK(r GoaExampleUserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.user+json; type=collection")
	if r == nil {
		r = GoaExampleUserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
