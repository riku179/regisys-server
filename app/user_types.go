// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/riku179/regisys-server/design
// --out=$(GOPATH)/src/github.com/riku179/regisys-server
// --version=v1.1.0-dirty
//
// API "regisys": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
)

// addItemPayload user type.
type addItemPayload struct {
	// item name
	ItemName *string `form:"item_name,omitempty" json:"item_name,omitempty" xml:"item_name,omitempty"`
	// Membership discount
	MemberPrice *int `form:"member_price,omitempty" json:"member_price,omitempty" xml:"member_price,omitempty"`
	// item price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// item quantity
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
}

// Validate validates the addItemPayload type instance.
func (ut *addItemPayload) Validate() (err error) {
	if ut.ItemName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "item_name"))
	}
	if ut.Price == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "price"))
	}
	if ut.MemberPrice == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "member_price"))
	}
	if ut.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "quantity"))
	}
	if ut.ItemName != nil {
		if ok := goa.ValidatePattern(`.+`, *ut.ItemName); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.item_name`, *ut.ItemName, `.+`))
		}
	}
	if ut.MemberPrice != nil {
		if *ut.MemberPrice < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.member_price`, *ut.MemberPrice, 0, true))
		}
	}
	if ut.Price != nil {
		if *ut.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.price`, *ut.Price, 0, true))
		}
	}
	if ut.Quantity != nil {
		if *ut.Quantity < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, *ut.Quantity, 1, true))
		}
	}
	return
}

// Publicize creates AddItemPayload from addItemPayload
func (ut *addItemPayload) Publicize() *AddItemPayload {
	var pub AddItemPayload
	if ut.ItemName != nil {
		pub.ItemName = *ut.ItemName
	}
	if ut.MemberPrice != nil {
		pub.MemberPrice = *ut.MemberPrice
	}
	if ut.Price != nil {
		pub.Price = *ut.Price
	}
	if ut.Quantity != nil {
		pub.Quantity = *ut.Quantity
	}
	return &pub
}

// AddItemPayload user type.
type AddItemPayload struct {
	// item name
	ItemName string `form:"item_name" json:"item_name" xml:"item_name"`
	// Membership discount
	MemberPrice int `form:"member_price" json:"member_price" xml:"member_price"`
	// item price
	Price int `form:"price" json:"price" xml:"price"`
	// item quantity
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
}

// Validate validates the AddItemPayload type instance.
func (ut *AddItemPayload) Validate() (err error) {
	if ut.ItemName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "item_name"))
	}

	if ok := goa.ValidatePattern(`.+`, ut.ItemName); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.item_name`, ut.ItemName, `.+`))
	}
	if ut.MemberPrice < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.member_price`, ut.MemberPrice, 0, true))
	}
	if ut.Price < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.price`, ut.Price, 0, true))
	}
	if ut.Quantity < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, ut.Quantity, 1, true))
	}
	return
}

// addOrderPayload user type.
type addOrderPayload struct {
	// Is it bought for member's price
	IsMemberPrice *bool `form:"is_member_price,omitempty" json:"is_member_price,omitempty" xml:"is_member_price,omitempty"`
	// Unique item ID
	ItemID *int `form:"item_id,omitempty" json:"item_id,omitempty" xml:"item_id,omitempty"`
	// item quantity
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
}

// Validate validates the addOrderPayload type instance.
func (ut *addOrderPayload) Validate() (err error) {
	if ut.ItemID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "item_id"))
	}
	if ut.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "quantity"))
	}
	if ut.IsMemberPrice == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "is_member_price"))
	}
	if ut.Quantity != nil {
		if *ut.Quantity < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, *ut.Quantity, 1, true))
		}
	}
	return
}

// Publicize creates AddOrderPayload from addOrderPayload
func (ut *addOrderPayload) Publicize() *AddOrderPayload {
	var pub AddOrderPayload
	if ut.IsMemberPrice != nil {
		pub.IsMemberPrice = *ut.IsMemberPrice
	}
	if ut.ItemID != nil {
		pub.ItemID = *ut.ItemID
	}
	if ut.Quantity != nil {
		pub.Quantity = *ut.Quantity
	}
	return &pub
}

// AddOrderPayload user type.
type AddOrderPayload struct {
	// Is it bought for member's price
	IsMemberPrice bool `form:"is_member_price" json:"is_member_price" xml:"is_member_price"`
	// Unique item ID
	ItemID int `form:"item_id" json:"item_id" xml:"item_id"`
	// item quantity
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
}

// Validate validates the AddOrderPayload type instance.
func (ut *AddOrderPayload) Validate() (err error) {

	if ut.Quantity < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, ut.Quantity, 1, true))
	}
	return
}

// addUserPayload user type.
type addUserPayload struct {
	// username
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the addUserPayload type instance.
func (ut *addUserPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "password"))
	}
	if ut.Name != nil {
		if ok := goa.ValidatePattern(`.+`, *ut.Name); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, *ut.Name, `.+`))
		}
	}
	if ut.Password != nil {
		if ok := goa.ValidatePattern(`.+`, *ut.Password); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.password`, *ut.Password, `.+`))
		}
	}
	return
}

// Publicize creates AddUserPayload from addUserPayload
func (ut *addUserPayload) Publicize() *AddUserPayload {
	var pub AddUserPayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// AddUserPayload user type.
type AddUserPayload struct {
	// username
	Name string `form:"name" json:"name" xml:"name"`
	// password
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate validates the AddUserPayload type instance.
func (ut *AddUserPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "password"))
	}
	if ok := goa.ValidatePattern(`.+`, ut.Name); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.name`, ut.Name, `.+`))
	}
	if ok := goa.ValidatePattern(`.+`, ut.Password); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`response.password`, ut.Password, `.+`))
	}
	return
}

// modifyItemPayload user type.
type modifyItemPayload struct {
	// item name
	ItemName *string `form:"item_name,omitempty" json:"item_name,omitempty" xml:"item_name,omitempty"`
	// Membership discount
	MemberPrice *int `form:"member_price,omitempty" json:"member_price,omitempty" xml:"member_price,omitempty"`
	// item price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// item quantity
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
}

// Validate validates the modifyItemPayload type instance.
func (ut *modifyItemPayload) Validate() (err error) {
	if ut.ItemName != nil {
		if ok := goa.ValidatePattern(`.+`, *ut.ItemName); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.item_name`, *ut.ItemName, `.+`))
		}
	}
	if ut.MemberPrice != nil {
		if *ut.MemberPrice < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.member_price`, *ut.MemberPrice, 0, true))
		}
	}
	if ut.Price != nil {
		if *ut.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.price`, *ut.Price, 0, true))
		}
	}
	if ut.Quantity != nil {
		if *ut.Quantity < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, *ut.Quantity, 1, true))
		}
	}
	return
}

// Publicize creates ModifyItemPayload from modifyItemPayload
func (ut *modifyItemPayload) Publicize() *ModifyItemPayload {
	var pub ModifyItemPayload
	if ut.ItemName != nil {
		pub.ItemName = ut.ItemName
	}
	if ut.MemberPrice != nil {
		pub.MemberPrice = ut.MemberPrice
	}
	if ut.Price != nil {
		pub.Price = ut.Price
	}
	if ut.Quantity != nil {
		pub.Quantity = ut.Quantity
	}
	return &pub
}

// ModifyItemPayload user type.
type ModifyItemPayload struct {
	// item name
	ItemName *string `form:"item_name,omitempty" json:"item_name,omitempty" xml:"item_name,omitempty"`
	// Membership discount
	MemberPrice *int `form:"member_price,omitempty" json:"member_price,omitempty" xml:"member_price,omitempty"`
	// item price
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// item quantity
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
}

// Validate validates the ModifyItemPayload type instance.
func (ut *ModifyItemPayload) Validate() (err error) {
	if ut.ItemName != nil {
		if ok := goa.ValidatePattern(`.+`, *ut.ItemName); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`response.item_name`, *ut.ItemName, `.+`))
		}
	}
	if ut.MemberPrice != nil {
		if *ut.MemberPrice < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.member_price`, *ut.MemberPrice, 0, true))
		}
	}
	if ut.Price != nil {
		if *ut.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.price`, *ut.Price, 0, true))
		}
	}
	if ut.Quantity != nil {
		if *ut.Quantity < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.quantity`, *ut.Quantity, 1, true))
		}
	}
	return
}

// modifyUserPayload user type.
type modifyUserPayload struct {
	IsRegister *bool `form:"is_register,omitempty" json:"is_register,omitempty" xml:"is_register,omitempty"`
}

// Validate validates the modifyUserPayload type instance.
func (ut *modifyUserPayload) Validate() (err error) {
	if ut.IsRegister == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "is_register"))
	}
	return
}

// Publicize creates ModifyUserPayload from modifyUserPayload
func (ut *modifyUserPayload) Publicize() *ModifyUserPayload {
	var pub ModifyUserPayload
	if ut.IsRegister != nil {
		pub.IsRegister = *ut.IsRegister
	}
	return &pub
}

// ModifyUserPayload user type.
type ModifyUserPayload struct {
	IsRegister bool `form:"is_register" json:"is_register" xml:"is_register"`
}
