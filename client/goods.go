// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=regisys/design
// --out=$(GOPATH)/src/regisys
// --version=v1.1.0-dirty
//
// API "regisys": goods Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddGoodsPath computes a request path to the add action of goods.
func AddGoodsPath() string {

	return fmt.Sprintf("/goods")
}

// Add items
func (c *Client) AddGoods(ctx context.Context, path string, payload *AddItemPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddGoodsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddGoodsRequest create the request corresponding to the add action endpoint of the goods resource.
func (c *Client) NewAddGoodsRequest(ctx context.Context, path string, payload *AddItemPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteGoodsPath computes a request path to the delete action of goods.
func DeleteGoodsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/goods/%s", param0)
}

// Delete item
func (c *Client) DeleteGoods(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteGoodsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteGoodsRequest create the request corresponding to the delete action endpoint of the goods resource.
func (c *Client) NewDeleteGoodsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ModifyGoodsPath computes a request path to the modify action of goods.
func ModifyGoodsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/goods/%s", param0)
}

// Modify item
func (c *Client) ModifyGoods(ctx context.Context, path string, payload *ModifyItemPayload, contentType string) (*http.Response, error) {
	req, err := c.NewModifyGoodsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewModifyGoodsRequest create the request corresponding to the modify action endpoint of the goods resource.
func (c *Client) NewModifyGoodsRequest(ctx context.Context, path string, payload *ModifyItemPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowGoodsPath computes a request path to the show action of goods.
func ShowGoodsPath() string {

	return fmt.Sprintf("/goods")
}

// Get items
func (c *Client) ShowGoods(ctx context.Context, path string, user *int) (*http.Response, error) {
	req, err := c.NewShowGoodsRequest(ctx, path, user)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowGoodsRequest create the request corresponding to the show action endpoint of the goods resource.
func (c *Client) NewShowGoodsRequest(ctx context.Context, path string, user *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if user != nil {
		tmp15 := strconv.Itoa(*user)
		values.Set("user", tmp15)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
