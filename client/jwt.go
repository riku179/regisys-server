// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/riku179/regisys/design
// --out=$(GOPATH)/src/github.com/riku179/regisys
// --version=v1.1.0-dirty
//
// API "regisys": jwt Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// SigninJWTPath computes a request path to the signin action of jwt.
func SigninJWTPath() string {

	return fmt.Sprintf("/token")
}

// Create a valid JWT
func (c *Client) SigninJWT(ctx context.Context, path string, isMember bool, authorization string) (*http.Response, error) {
	req, err := c.NewSigninJWTRequest(ctx, path, isMember, authorization)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSigninJWTRequest create the request corresponding to the signin action endpoint of the jwt resource.
func (c *Client) NewSigninJWTRequest(ctx context.Context, path string, isMember bool, authorization string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp16 := strconv.FormatBool(isMember)
	values.Set("is_member", tmp16)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header

	header.Set("Authorization", authorization)

	if c.SigninBasicAuthSigner != nil {
		c.SigninBasicAuthSigner.Sign(req)
	}
	return req, nil
}
