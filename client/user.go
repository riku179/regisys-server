// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/riku179/regisys/design
// --out=$(GOPATH)/src/github.com/riku179/regisys
// --version=v1.1.0-dirty
//
// API "regisys": user Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// AddUserPath computes a request path to the add action of user.
func AddUserPath() string {

	return fmt.Sprintf("/user")
}

// Add user for NOT MMA member)
func (c *Client) AddUser(ctx context.Context, path string, payload *AddUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddUserRequest create the request corresponding to the add action endpoint of the user resource.
func (c *Client) NewAddUserRequest(ctx context.Context, path string, payload *AddUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ModifyUserPath computes a request path to the modify action of user.
func ModifyUserPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/user/%s", param0)
}

// Modify group of user
func (c *Client) ModifyUser(ctx context.Context, path string, payload *ModifyUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewModifyUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewModifyUserRequest create the request corresponding to the modify action endpoint of the user resource.
func (c *Client) NewModifyUserRequest(ctx context.Context, path string, payload *ModifyUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowUserPath computes a request path to the show action of user.
func ShowUserPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/user/%s", param0)
}

// Show one user
func (c *Client) ShowUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUserRequest create the request corresponding to the show action endpoint of the user resource.
func (c *Client) NewShowUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowListUserPath computes a request path to the showList action of user.
func ShowListUserPath() string {

	return fmt.Sprintf("/user/list")
}

// Show users list
func (c *Client) ShowListUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowListUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowListUserRequest create the request corresponding to the showList action endpoint of the user resource.
func (c *Client) NewShowListUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
